var documenterSearchIndex = {"docs":
[{"location":"#RRSP-Solver-Documentation","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"","category":"section"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"The purpose of this document is to illustrate the user API of Robust Recoverable Shortest Path Solver. Technical documentation of the solver is left in the source code in the form of docstrings and inline comments.","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"The documentation adheres to the 0.1.0 version of Rrsp package.","category":"page"},{"location":"#Contents","page":"RRSP Solver Documentation","title":"Contents","text":"","category":"section"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"","category":"page"},{"location":"#How-to-install","page":"RRSP Solver Documentation","title":"How to install","text":"","category":"section"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"Use Pkg package manager to install this package for a session.","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"Clone the repository.\nAdd the package to local registry by\njulia\nimport Pkg; Pkg.develop(path=\"./Rrsp\")\nBuild the package by importing it for the first time:\nimport Rrsp","category":"page"},{"location":"#Dependencies","page":"RRSP Solver Documentation","title":"Dependencies","text":"","category":"section"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"The only package dependency of Rrsp is JuMP. Users are responsible for installing MIP solvers they want to use with Rrsp.","category":"page"},{"location":"#API-Data-Types","page":"RRSP Solver Documentation","title":"API Data Types","text":"","category":"section"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"For simplicity, the API uses only one object type for input and output, respectively.","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"RrspInstance\nRrspSolution","category":"page"},{"location":"#Rrsp.RrspInstance","page":"RRSP Solver Documentation","title":"Rrsp.RrspInstance","text":"struct RrspInstance\n    graph::Graph\n    s_idx::Integer\n    t_idx::Integer\n    neighbourhood::NeighbourhoodType\n    k::Integer\n    gamma::Float64\nend\n\nThe structure containing serialized RRSP problem instance. It can be used as an opaque type, since the solving functions only input parameter is the instance itself.\n\n\n\n\n\n","category":"type"},{"location":"#Rrsp.RrspSolution","page":"RRSP Solver Documentation","title":"Rrsp.RrspSolution","text":"struct RrspSolution\n    first_stage_path::RrspPath\n    second_stage_path::RrspPath\n    value::Float64\nend\n\nThe structure containing optimal pair of paths and the optimal value of the solution to the RRSP problems.\n\nEvery solver API function returns RrspSolution structure object. When solution is infeasible, the RrspSolution structure is returned empty – the paths structures are initialized to mathbf0 vectors and value is Inf.\n\nFor convenience, the same structure is used when returning the solution for RRSP subproblems, which concern only one optimal path. In this case, as to which path of the set is given by function docstring.\n\n\n\n\n\n","category":"type"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"The RrspPath structure, the building block of the output object type, is left transparent:","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"RrspPath","category":"page"},{"location":"#Rrsp.RrspPath","page":"RRSP Solver Documentation","title":"Rrsp.RrspPath","text":"struct RrspPath\n    arcs::Vector{Bool}\nend\n\nThe structure for encapsulating a path of the problem instance graph. Paths are represented by characteristic vectors of the arc set of the instance graph as this representation allows for easier constraints formulation in MIP modeling – the principal aspect of the solver.\n\n\n\n\n\n","category":"type"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"To fetch the arcs of which the solution path consist you can use the RrspPath.arcs vector.","category":"page"},{"location":"#Setting-the-Optimizer","page":"RRSP Solver Documentation","title":"Setting the Optimizer","text":"","category":"section"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"Before using the solver you need to supply the optimizer of your choice. This is done by simple assignment to the global variable Rrsp.optimizer. For example, if we want to use Cbc optimizer to solve MIP models we must have assigned","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"Rrsp.optimizer = Cbc.Optimizer","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"somewhere before using Rrsp API. The optimizer can be set dynamically between calls to the API, for example to test solving times using different optimizers. ","category":"page"},{"location":"#Parsing-Input","page":"RRSP Solver Documentation","title":"Parsing Input","text":"","category":"section"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"The instance of RRSP is assumed to be given in a text file. Parsing the instance is separate from solving the problem. Hence, you can keep multiple RrspInstance objects at runtime at once.","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"parseInstanceFromFile","category":"page"},{"location":"#Rrsp.parseInstanceFromFile","page":"RRSP Solver Documentation","title":"Rrsp.parseInstanceFromFile","text":"parseInstanceFromFile(file_name::String)::RrspInstance\n\nReturn serialized RRSP instance given in file_name. The input file should conform to the following format:\n\ns t N k G\n<arc>\n...\n<arc>\n\nwhere\n\ns – path start node id,\nt – path end node id,\nN – neighbourhood type; one of INC, EXC, SYM_DIFF,\nk – neighbourhood size parameter,\nG – budget,\n\nand <arc> is a line serializing one arc:\n\nn1 n2 c1 c2 d\n\nwhere\n\nn1 – arc start node id,\nn2 – arc end node id,\nc1 – first stage cost,\nc2 – second stage cost lower bound,\nd – second stage cost maximum deviation.\n\nExample:\n\n1 3 INC 1 100.0\n1 2 0.0 50.0 10.0\n1 2 0.0 0.0 100.0\n2 3 0.0 20.0 30.0\n2 3 0.0 40.0 0.0\n\n\n\n\n\n","category":"function"},{"location":"#Solving-Shortest-Path-Problems","page":"RRSP Solver Documentation","title":"Solving Shortest Path Problems","text":"","category":"section"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"Once the instance is deserialized you can choose which problem should be solved with it. Solving the instance doesn't change its data so one instance object can be resused to obtain solutions to different variants of the problem.","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"Functions solving RRSP and the subproblems are grouped here according to the problem type:","category":"page"},{"location":"#Deterministic-SP","page":"RRSP Solver Documentation","title":"Deterministic SP","text":"","category":"section"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"solveDeterministicShortestPath","category":"page"},{"location":"#Rrsp.solveDeterministicShortestPath","page":"RRSP Solver Documentation","title":"Rrsp.solveDeterministicShortestPath","text":"solveDeterministicShortestPath(instance::RrspInstance)::RrspSolution\n\nReturns a shortest s-t path in the graph instance.graph with respect to Cost.first costs, where s and t are nodes given by instance.s_idx, instance.t_idx indices in instance.graph.arcs array.\n\nThe path is stored in RrspSolution.first_stage_path of the returned structure and its cost is assigned to RrspSolution.value.\n\nThe path is computed using LP model.\n\n\n\n\n\n","category":"function"},{"location":"#Incremental-SP","page":"RRSP Solver Documentation","title":"Incremental SP","text":"","category":"section"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"solveIncrementalShortestPath","category":"page"},{"location":"#Rrsp.solveIncrementalShortestPath","page":"RRSP Solver Documentation","title":"Rrsp.solveIncrementalShortestPath","text":"solveIncrementalShortestPath(instance::RrspInstance, x::Path)::RrspSolution\n\nReturns a shortest s-t path in the graph instance.graph with respect to Cost.second costs, where s and t are nodes given by instance.s_idx, instance.t_idx indices in instance.graph.arcs array.\n\nIf the costs for incremental problem are different than second stage costs lower bounds, they should be set before calling the function.\n\nThe path is in the neighbourhood of the path x; the neighbourhood type is selected with instance.neighbourhood and the neighbourhood size with instance.k values.\n\nThe path is stored in RrspSolution.second_stage_path of the returned structure and its cost is assigned to RrspSolution.value. For integrality of the solution, the input parameter path x is stored in RrspSolution.first_stage_path. However, the first stage cost doesn't affect the value of the solution.\n\nThe path is computed using compact MIP model.\n\n\n\n\n\n","category":"function"},{"location":"#Recoverable-SP","page":"RRSP Solver Documentation","title":"Recoverable SP","text":"","category":"section"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"solveRecoverableShortestPath\nsolveRecoverableShortestPathInAsp","category":"page"},{"location":"#Rrsp.solveRecoverableShortestPath","page":"RRSP Solver Documentation","title":"Rrsp.solveRecoverableShortestPath","text":"solveRecoverableShortestPath(instance::RrspInstance)::RrspSolution\n\nReturns optimal first and second stage shortest s-t path in the graph instance.graph for Recoverable Shortest Path, to which the RRSP problem with interval uncertainty reduces to. The nodes s and t are given by instance.s_idx, instance.t_idx indices in instance.graph.arcs array.\n\nThe paths are computed using compact MIP model.\n\n\n\n\n\n","category":"function"},{"location":"#Rrsp.solveRecoverableShortestPathInAsp","page":"RRSP Solver Documentation","title":"Rrsp.solveRecoverableShortestPathInAsp","text":"solveRecoverableShortestPathInAsp(instance::RrspInstance)::RrspSolution\n\nReturns optimal first and second stage shortest s-t path in the graph instance.graph for Recoverable Shortest Path in Arc Series-Parallel (ASP) graph.\n\nThe instance.graph is assumed to be ASP. Hence, it's not validated further. If this is not the case, then the behaviour and the return value of this function are undefined.\n\nThe paths are computed using combinatorial algoritm.\n\nNOTE: The only supported neighbourhood is inclusion for now!\n\n\n\n\n\n","category":"function"},{"location":"#Recoverable-Robust-SP","page":"RRSP Solver Documentation","title":"Recoverable Robust SP","text":"","category":"section"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"solveRrspContBudget\nsolveRrspContBudgetDag","category":"page"},{"location":"#Rrsp.solveRrspContBudget","page":"RRSP Solver Documentation","title":"Rrsp.solveRrspContBudget","text":"solveRrspContBudget(instance::RrspInstance)::RrspSolution\n\nReturns optimal first and second stage shortest s-t path in the graph instance.graph for Recoverable Robust Shortest Path with continuous budgeted uncertainty. The nodes s and t are given by instance.s_idx, instance.t_idx indices in instance.graph.arcs array. The maximum budget value is equal to instance.gamma.\n\nIf the graph is a DAG, then use solveRrspContBudgetDag function.\n\nThe paths are computed using compact MIP model.\n\n\n\n\n\n","category":"function"},{"location":"#Rrsp.solveRrspContBudgetDag","page":"RRSP Solver Documentation","title":"Rrsp.solveRrspContBudgetDag","text":"solveRrspContBudgetDag(instance::RrspInstance)::RrspSolution\n\nReturns optimal first and second stage shortest s-t path in the graph instance.graph for Recoverable Robust Shortest Path with continuous budgeted uncertainty when instance.graph is a directed acyclic graph. The nodes s and t are given by instance.s_idx, instance.t_idx indices in instance.graph.arcs array. The maximum budget value is equal to instance.gamma.\n\nThe paths are computed by solving a family of m + 1 compact MIP models, where m is the number of arcs in the DAG. Since the graph is acyclic, the model does not contain anti-cyclic constraints, unlike the model for general digraphs.\n\n\n\n\n\n","category":"function"},{"location":"#Working-Example","page":"RRSP Solver Documentation","title":"Working Example","text":"","category":"section"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"To illustrate the use of API we present an example of solving a small problem instance. In this example we use Cbc for solving MIP models.","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"Assume that there exists a file under data/instance.rrsp path containing a problem instance written down as shown in Parsing Input section.\nMake sure Rrsp definitions are visible. Use import to avoid name collisions in your project. If not an issue, you can use using.","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"julia> import Rrsp","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"Import Cbc optimizer package and use it to set Rrsp optimizer (you can choose any JuMP conforming optimizer able to solve MIP models):","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"julia> import Cbc\n\njulia> Rrsp.optimizer = Cbc.Optimizer","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"Parse the file to create an instance object:","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"julia> instance::Rrsp.RrspInstance = Rrsp.parseInstanceFromFile(\"data/instance.rrsp\")","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"Use one of the solver functions to solve specific variant of the RRSP problem. Here, we use function for solving RRSP with continuous budget in general digraphs:","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"solution::Rrsp.RrspSolution = Rrsp.solveRrspContBudget(instance)","category":"page"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"You can check if solving was succesful with solution.value != Inf. To access the optimal paths use solution.first_stage_path and solution.second_stage_path objects.","category":"page"},{"location":"#Index","page":"RRSP Solver Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"RRSP Solver Documentation","title":"RRSP Solver Documentation","text":"","category":"page"}]
}
